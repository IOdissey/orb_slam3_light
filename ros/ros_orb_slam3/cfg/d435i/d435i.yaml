%YAML:1.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------
Camera.type: "PinHole"

# Camera calibration and distortion parameters (OpenCV) 
Camera.fx: 426.44384765625
Camera.fy: 426.44384765625
Camera.cx: 422.5054931640625
Camera.cy: 242.93309020996094

Camera.k1: 0.0
Camera.k2: 0.0
Camera.p1: 0.0
Camera.p2: 0.0

Camera.width: 848
Camera.height: 480

# Camera frames per second 
Camera.fps: 30.0

# stereo baseline times fx
Camera.bf: 21.229568779101562

# Close/Far threshold. Baseline times.
ThDepth: 35.0

# Equalizes the histogram of a grayscale image using Contrast Limited Adaptive Histogram Equalization.
do_equalize: 1

# TODO.
# useStereo: 1

# Print process time.
logTime: 1

# ROS
topic_left: "/d435i/infra1/image_rect_raw"
topic_right: "/d435i/infra2/image_rect_raw"


#--------------------------------------------------------------------------------------------
# ROS Publish
#--------------------------------------------------------------------------------------------

map_frame_id: "world"
pose_frame_id: "camera"
publish_map_points: 1


#--------------------------------------------------------------------------------------------
# IMU Parameters
#--------------------------------------------------------------------------------------------

useIMU: 1

# IMU noise
IMU.NoiseGyro: 1.7e-04 # 1.6968e-04 
IMU.NoiseAcc: 2.0e-03 # 2.0000e-3
IMU.GyroWalk: 1.9393e-05 
IMU.AccWalk: 3.e-03 # 3.0000e-3
IMU.Frequency: 200

# ROS
topic_imu: "/d435i/imu"

# Transformation from camera 0 to body-frame (imu)
Tbc: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   data: [1.0, 0.0, 0.0,  0.00552,
          0.0, 1.0, 0.0, -0.0051,
          0.0, 0.0, 1.0, -0.01174,
          0.0, 0.0, 0.0,  1.0]


#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# path to vocabulary
vocabulary: "../../../vocabulary/ORBvoc.txt"

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1200

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7


#--------------------------------------------------------------------------------------------
# Stereo Rectification. Only if you need to pre-rectify the images.
# Camera.fx, .fy, etc must be the same as in LEFT.P
#--------------------------------------------------------------------------------------------

# 
do_rectify: 0

LEFT.height: 480
LEFT.width: 848
LEFT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data:[0, 0, 0, 0, 0.0]
LEFT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [426.44384765625, 0.0, 422.5054931640625, 0.0, 426.44384765625, 242.93309020996094, 0.0, 0.0, 1.0]
   
# Intrinsic camera matrix for the raw (distorted) images.
#     [fx  0 cx]
# K = [ 0 fy cy]
#     [ 0  0  1]
# Projects 3D points in the camera coordinate frame to 2D pixel
# coordinates using the focal lengths (fx, fy) and principal point
# (cx, cy).

LEFT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [1, 0, 0, 0, 1, 0, 0, 0, 1]
LEFT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [426.44384765625, 0, 422.5054931640625, 0,0, 426.44384765625, 242.93309020996094, 0,0, 0, 1, 0]

# Projection/camera matrix
#     [fx'  0  cx' Tx]
# P = [ 0  fy' cy' Ty]
#     [ 0   0   1   0]
# By convention, this matrix specifies the intrinsic (camera) matrix
#  of the processed (rectified) image. That is, the left 3x3 portion
#  is the normal camera intrinsic matrix for the rectified image.
# It projects 3D points in the camera coordinate frame to 2D pixel
#  coordinates using the focal lengths (fx', fy') and principal point
#  (cx', cy') - these may differ from the values in K.
# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will
#  also have R = the identity and P[1:3,1:3] = K.
# For a stereo pair, the fourth column [Tx Ty 0]' is related to the
#  position of the optical center of the second camera in the first
#  camera's frame. We assume Tz = 0 so both cameras are in the same
#  stereo image plane. The first camera always has Tx = Ty = 0. For
#  the right (second) camera of a horizontal stereo pair, Ty = 0 and
#  Tx = -fx' * B, where B is the baseline between the cameras.
# Given a 3D point [X Y Z]', the projection (x, y) of the point onto
#  the rectified image is given by:
#  [u v w]' = P * [X Y Z 1]'
#         x = u / w
#         y = v / w
#  This holds for both images of a stereo pair.

RIGHT.height: 480
RIGHT.width: 848
RIGHT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data:[0, 0, 0, 0, 0.0]
RIGHT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [426.44384765625, 0.0, 422.5054931640625, 0.0, 426.44384765625, 242.93309020996094, 0.0, 0.0, 1.0]
RIGHT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [1, 0, 0, 0, 1, 0, 0, 0, 1]
RIGHT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [426.44384765625, 0, 422.5054931640625, -21.229568779101562,0,426.44384765625, 242.93309020996094, 0,0, 0, 1, 0]